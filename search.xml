<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常见的汇编指令</title>
    <url>/posts/1/</url>
    <content><![CDATA[<h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><h4 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a>NOP</h4><ul>
<li>NOP 的机器码是<code>90</code>；</li>
<li>NOP 是空指令，就是没有操作，无操作；</li>
<li>使用 <code>NOP</code> 来填充指令执行后多出来的字节，而不是用<code>00</code>来填充；</li>
</ul>
<a id="more"></a>

<h4 id="PUSH-压入堆栈"><a href="#PUSH-压入堆栈" class="headerlink" title="PUSH 压入堆栈"></a>PUSH 压入堆栈</h4><p>PUSH 的用法：</p>
<ul>
<li><code>PUSH 0x1 / 0xF</code>：把十六进制数字压入堆栈顶部；</li>
<li><code>PUSH EAX / EBX</code>：把指定寄存器中的数据压入堆栈顶部；</li>
<li><code>PUSH [00401000]</code>：把指定内存地址中的数据压入堆栈顶部；</li>
</ul>
<h4 id="POP-弹出堆栈"><a href="#POP-弹出堆栈" class="headerlink" title="POP 弹出堆栈"></a>POP 弹出堆栈</h4><p>POP 的用法：</p>
<ul>
<li><code>POP EAX / EBX</code>：将堆栈顶部的内容弹出并放入指定的寄存器；</li>
</ul>
<h4 id="PUSHAD"><a href="#PUSHAD" class="headerlink" title="PUSHAD"></a>PUSHAD</h4><ul>
<li>通用寄存器指：EAX / ECX / EDX / EBX / ESP / EBP / ESI / EDI；</li>
<li>PUSHAD 保护现场 / 备份现场，将通用寄存器的数据自上而下依次压入堆栈，最后一个寄存器的数据处于堆栈顶部；</li>
<li>PUSHAD 是 32 位操作；</li>
<li><code>PUSHAD</code> 相当于是<code>PUSH EAX, PUSH ECX, PUSH EDX, PUSH EBX, PUSH ESP, PUSH EBP, PUSH ESI, PUSH EDI</code>八条命令的合集；</li>
</ul>
<h4 id="POPAD"><a href="#POPAD" class="headerlink" title="POPAD"></a>POPAD</h4><ul>
<li>通用寄存器指：EAX / ECX / EDX / EBX / ESP / EBP / ESI / EDI；</li>
<li>POPAD 还原现场，将堆栈顶部的数据依次弹出并自下而上依次填充到通用寄存器；</li>
<li>POPAD 是 32 位操作；</li>
<li><code>POPAD</code> 相当于是<code>POP EDI, POP ESI, POP EBP, POP ESP, POP EBX, POP EDX, POP ECX, POP EAX</code>八条命令的合集；</li>
</ul>
<h4 id="PUSHA"><a href="#PUSHA" class="headerlink" title="PUSHA"></a>PUSHA</h4><ul>
<li>PUSHA 和 PUSHAD 功能相同，用于备份现场；</li>
<li>PUSHA 是 16 位操作；</li>
<li><code>PUSHA</code> 相当于是<code>PUSH AX, PUSH CX, PUSH DX, PUSH BX, PUSH SP, PUSH BP, PUSH SI, PUSH DI</code>八条命令的合集；</li>
</ul>
<h4 id="POPA"><a href="#POPA" class="headerlink" title="POPA"></a>POPA</h4><ul>
<li>POPA 和 POPAD 功能相同，用于还原现场；</li>
<li>POPA 是 16 位操作；</li>
<li><code>POPA</code> 相当于是<code>POP DI, POP SI, POP BP, POP SP, POP BX, POP DX, POP CX, POP AX</code>八条命令的合集；</li>
</ul>
<h4 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h4><ul>
<li>MOV 本意为<code>move，移动</code>，但功能相当于复制/赋值；</li>
<li><code>MOV EAX, ECX</code>：两个操作数的长度必须相同；</li>
<li><code>MOV EAX, ECX</code>：复制<code>ECX（第二个参数）</code>的数据到<code>EAX（第一个参数）</code>，4 字节操作；</li>
<li><code>MOV AX, CX</code>：复制<code>CX（第二个参数）</code>的数据到<code>AX（第一个参数）</code>，2 字节操作；</li>
<li><code>MOV AL, CL</code>：复制<code>CL（第二个参数）</code>的数据到<code>AL（第一个参数）</code>，1 字节操作；</li>
<li><code>MOV [00402000], EAX</code>：复制<code>EAX（第二个参数）</code>的数据到<code>[指定内存地址]（第一个参数）</code>，4 字节操作；</li>
<li><code>MOV [00402000], AX</code>：复制<code>AX（第二个参数）</code>的数据到<code>[指定内存地址]（第一个参数）</code>，2 字节操作；</li>
<li><code>MOV [00402000], AH</code>：复制<code>AH（第二个参数）</code>的数据到<code>[指定内存地址]（第一个参数）</code>，1 字节操作；</li>
</ul>
<h4 id="MOVSX"><a href="#MOVSX" class="headerlink" title="MOVSX"></a>MOVSX</h4><ul>
<li><code>MOVSX EAX, CX</code>：复制<code>CX（第二个参数）</code>的数据到<code>EAX（第一个参数）</code>，如果<code>EAX（第一个参数）</code>的长度比<code>CX（第二个参数）</code>长，剩余的长度用<code>CX（第二个参数）</code>的符号位填充；</li>
<li>正数用 0 填充，负数用 F 填充；</li>
</ul>
<h4 id="MOVZX"><a href="#MOVZX" class="headerlink" title="MOVZX"></a>MOVZX</h4><ul>
<li><code>MOVZX EAX, CX</code>：复制<code>CX（第二个参数）</code>的数据到<code>EAX（第一个参数）</code>，如果<code>EAX（第一个参数）</code>的长度比<code>CX（第二个参数）</code>长，剩余的长度用 0 填充；</li>
<li>带 0 扩展传送命令；</li>
</ul>
<h4 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h4><ul>
<li>LEA：复制<code>第二个参数的内存地址</code> 或 <code>第二个参数运算后的内存地址</code>到<code>第一个参数</code>；</li>
<li><code>LEA EAX, [00401000]</code>：第一个参数必须是通用寄存器，第二个参数必须是内存地址；</li>
<li><code>LEA EAX, [ECX + 16]</code>：第一个参数必须是通用寄存器，第二个参数必须是内存地址；</li>
</ul>
<h4 id="XCHG-互换-交换"><a href="#XCHG-互换-交换" class="headerlink" title="XCHG 互换 / 交换"></a>XCHG 互换 / 交换</h4><ul>
<li><code>XCHG EAX, ECX</code>：第一个参数可以是通用寄存器或内存地址，第二个参数必须是通用寄存器；</li>
<li><code>XCHG [00401000], ECX</code>：第一个参数可以是通用寄存器或内存地址，第二个参数必须是通用寄存器；</li>
</ul>
<h4 id="SHR-二进制右移"><a href="#SHR-二进制右移" class="headerlink" title="SHR 二进制右移"></a>SHR 二进制右移</h4><h4 id="SHL-二进制左移"><a href="#SHL-二进制左移" class="headerlink" title="SHL 二进制左移"></a>SHL 二进制左移</h4><h4 id="CLD"><a href="#CLD" class="headerlink" title="CLD"></a>CLD</h4><ul>
<li>用来操作方向标志位 DF，CLD 使 DF 复位，即让 DF = 00；</li>
</ul>
<h4 id="STD"><a href="#STD" class="headerlink" title="STD"></a>STD</h4><ul>
<li>用来操作方向标志位 DF，STD 使 DF 置位，即让 DF = 01；</li>
</ul>
<h3 id="数学指令"><a href="#数学指令" class="headerlink" title="数学指令"></a>数学指令</h3><h4 id="ADD-SUB-加法-减法"><a href="#ADD-SUB-加法-减法" class="headerlink" title="ADD / SUB | 加法 / 减法"></a>ADD / SUB | 加法 / 减法</h4><ul>
<li><code>ADD / SUB</code>的返回结果放在第一个参数中；</li>
</ul>
<h4 id="ADC-带进位的加法"><a href="#ADC-带进位的加法" class="headerlink" title="ADC 带进位的加法"></a>ADC 带进位的加法</h4><ul>
<li><code>ADC EAX, ECX</code> = <code>EAX + ECX + 0 | 1</code>：两个参数累加并且加上<code>进位标识符CF</code>的值为最终结果；</li>
</ul>
<h4 id="SBB-带进位的减法"><a href="#SBB-带进位的减法" class="headerlink" title="SBB 带进位的减法"></a>SBB 带进位的减法</h4><ul>
<li><code>SBB EAX, ECX</code> = <code>EAX - ECX - 0 | 1</code>：两个参数相减并且减去<code>进位标识符CF</code>的值为最终结果；</li>
</ul>
<h4 id="INC-DEC-自增-自减"><a href="#INC-DEC-自增-自减" class="headerlink" title="INC / DEC | 自增 / 自减"></a>INC / DEC | 自增 / 自减</h4><ul>
<li><code>INC EAX</code>：每执行一次该指令，参数的值自增 1；</li>
<li><code>DEC EAX</code>：每执行一次该指令，参数的值自减 1；</li>
</ul>
<h4 id="MUL-无符号乘法"><a href="#MUL-无符号乘法" class="headerlink" title="MUL 无符号乘法"></a>MUL 无符号乘法</h4><ul>
<li><code>MUL ECX</code>：<code>MUL CL | CX | ECX</code>默认和 <code>AL | AX | EAX</code>做乘法运算，运算结果分别存放到<br><code>AL | DX:AX | EDX:EAX</code>中，其中<code>DX 或 EDX</code>存放高位，<code>AX 或 EAX</code>存放低位；</li>
</ul>
<h4 id="DIV-无符号除法"><a href="#DIV-无符号除法" class="headerlink" title="DIV 无符号除法"></a>DIV 无符号除法</h4><ul>
<li><code>DIV CL</code>：默认的被除数为<code>EAX</code>，如果 <code>CL（除数）</code>是 8 位，那么<code>商</code>放在<code>AL</code>中，<code>余数</code>放在<code>AH</code>中；</li>
<li><code>DIV CX</code>：默认的被除数为<code>EAX</code>，如果 <code>CX（除数）</code>是 16 位，那么<code>商</code>放在<code>AX</code>中，<code>余数</code>放在<code>DX</code>中；</li>
<li><code>DIV ECX</code>：默认的被除数为<code>EAX</code>，如果 <code>ECX（除数）</code>是 32 位，那么<code>商</code>放在<code>EAX</code>中，<code>余数</code>放在<code>EDX</code>中；</li>
</ul>
<h4 id="IMUL-有符号乘法"><a href="#IMUL-有符号乘法" class="headerlink" title="IMUL 有符号乘法"></a>IMUL 有符号乘法</h4><ul>
<li>立即数：自然数；</li>
<li>单操作数：<code>IMUL CL | CX | ECX</code>默认和 <code>AL | AX | EAX</code>做乘法运算，运算结果分别存放到<br><code>AL | DX:AX | EDX:EAX</code>中，其中<code>DX 或 EDX</code>存放高位，<code>AX 或 EAX</code>存放低位；</li>
<li>双操作数：<code>IMUL AX, CX | 0x2</code>：第一个参数必须是通用寄存器，第二个参数可以是通用寄存器、内存地址或立即数，运算结果存放到第一个参数中；</li>
<li>三操作数：<code>IMUL AX, CX, 0x2</code>：第一个参数必须是通用寄存器，第二个参数可以是通用寄存器或内存地址，第三个参数必须是立即数，将第二个参数和第三个参数的运算结果存放到第一个参数中；</li>
</ul>
<h4 id="IDIV-有符号除法"><a href="#IDIV-有符号除法" class="headerlink" title="IDIV 有符号除法"></a>IDIV 有符号除法</h4><ul>
<li><code>IDIV CL</code>：默认的被除数为<code>EAX</code>，如果 <code>CL（除数）</code>是 8 位，那么<code>商</code>放在<code>AL</code>中，<code>余数</code>放在<code>AH</code>中；</li>
<li><code>IDIV CX</code>：默认的被除数为<code>EAX</code>，如果 <code>CX（除数）</code>是 16 位，那么<code>商</code>放在<code>AX</code>中，<code>余数</code>放在<code>DX</code>中；</li>
<li><code>IDIV ECX</code>：默认的被除数为<code>EAX</code>，如果 <code>ECX（除数）</code>是 32 位，那么<code>商</code>放在<code>EAX</code>中，<code>余数</code>放在<code>EDX</code>中；</li>
</ul>
<h4 id="XADD-先交换后相加"><a href="#XADD-先交换后相加" class="headerlink" title="XADD 先交换后相加"></a>XADD 先交换后相加</h4><ul>
<li><code>XADD EAX, ECX</code>：先交换两个参数的值，然后进行加法运算，运算结果保存在第一个参数中；</li>
</ul>
<h4 id="NEG-取反"><a href="#NEG-取反" class="headerlink" title="NEG 取反"></a>NEG 取反</h4><ul>
<li><code>NEG EAX</code>：如题，取反</li>
</ul>
<h3 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h3><h4 id="AND-OR-XOR-NOT"><a href="#AND-OR-XOR-NOT" class="headerlink" title="AND / OR / XOR / NOT"></a>AND / OR / XOR / NOT</h4><ul>
<li>全部以二进制形式进行比较 / 操作；</li>
<li><code>AND EAX, ECX</code>：双 1 为 1，否则为 0；</li>
<li><code>OR EAX, ECX</code>：逢 1 为 1，否则为 0；</li>
<li><code>XOR EAX, ECX</code>：不同为 1，相同为 0；</li>
<li><code>NOT EAX</code>：二进制取反；</li>
</ul>
<h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><h4 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h4><ul>
<li><code>CMP EAX, ECX</code>：两个参数相减进行比较，如果运算结果为 0，则 <code>ZF（0 标志位）</code>为 1；</li>
<li>通用寄存器、内存地址和立即数之间可以相互比较；</li>
</ul>
<h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h4><ul>
<li><code>TEST EAX, EAX</code>：判断 EAX 自身是否为 0；</li>
<li>如果运算结果为 0，且 ZF（0 标志位）为 1，则说明 EAX 自身为 0；</li>
</ul>
<h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><h4 id="JMP-无条件跳转"><a href="#JMP-无条件跳转" class="headerlink" title="JMP 无条件跳转"></a>JMP 无条件跳转</h4><ul>
<li><code>JMP 00401018</code>：无条件跳转；</li>
</ul>
<h4 id="JE-JZ"><a href="#JE-JZ" class="headerlink" title="JE / JZ"></a>JE / JZ</h4><ul>
<li>名称不同，功能相同；</li>
<li><code>ZF（0 标志位）</code>为 1 则跳转；</li>
</ul>
<h4 id="JNE-JNZ"><a href="#JNE-JNZ" class="headerlink" title="JNE / JNZ"></a>JNE / JNZ</h4><ul>
<li>名称不同，功能相同；</li>
<li><code>ZF（0 标志位）</code>为 0 则跳转；</li>
<li>与<code>JE / JZ</code>相反；</li>
</ul>
<h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><ul>
<li><code>SF（符号位标志位）</code>为 1 则跳转；</li>
</ul>
<h4 id="JNS"><a href="#JNS" class="headerlink" title="JNS"></a>JNS</h4><ul>
<li><code>SF（符号位标志位）</code>为 0 则跳转；</li>
<li>与<code>JS</code>相反；</li>
</ul>
<h4 id="JP-JPE"><a href="#JP-JPE" class="headerlink" title="JP / JPE"></a>JP / JPE</h4><ul>
<li>名称不同，功能相同；</li>
<li><code>PF（奇偶标志位）</code>为 1 则跳转；</li>
</ul>
<h4 id="JNP-JPO"><a href="#JNP-JPO" class="headerlink" title="JNP / JPO"></a>JNP / JPO</h4><ul>
<li>名称不同，功能相同；</li>
<li><code>PF（奇偶标志位）</code>为 0 则跳转；</li>
<li>与<code>JP / JPE</code>相反；</li>
</ul>
<h4 id="JO"><a href="#JO" class="headerlink" title="JO"></a>JO</h4><ul>
<li><code>OF（溢出标志位）</code>为 1 则跳转；</li>
</ul>
<h4 id="JNO"><a href="#JNO" class="headerlink" title="JNO"></a>JNO</h4><ul>
<li><code>OF（溢出标志位）</code>为 0 则跳转；</li>
<li>与<code>JO</code>相反；</li>
</ul>
<h4 id="JB"><a href="#JB" class="headerlink" title="JB"></a>JB</h4><ul>
<li><code>CF（进位 / 借位 标志位）</code>为 1 则跳转；</li>
<li>JB 不关注符号位，只关注无符号位的运算；</li>
</ul>
<h4 id="JNB"><a href="#JNB" class="headerlink" title="JNB"></a>JNB</h4><ul>
<li><code>CF（进位 / 借位 标志位）</code>为 0 则跳转；</li>
<li>与<code>JB</code>相反；</li>
</ul>
<h4 id="JL"><a href="#JL" class="headerlink" title="JL"></a>JL</h4><ul>
<li><code>SF（）符号位标志位</code>为 1 则跳转；</li>
<li>与 JB 不同的是，JL 关注有符号位的运算；</li>
<li>JL 会忽略<code>CF（进位 / 借位 标志位）</code>的变化；</li>
</ul>
<h4 id="JBE"><a href="#JBE" class="headerlink" title="JBE"></a>JBE</h4><ul>
<li><code>OF（溢出标志位）为 1</code>或<code>ZF（0 标志位）为 0</code>则跳转；</li>
<li>小于等于；</li>
</ul>
<h4 id="JNBE-JA"><a href="#JNBE-JA" class="headerlink" title="JNBE / JA"></a>JNBE / JA</h4><ul>
<li>名称不同，功能相同；</li>
<li><code>OF（溢出标志位）为 0</code>并且<code>ZF（0 标志位）为 1</code>则跳转；</li>
<li>必须是大于；</li>
</ul>
<h4 id="CALL-RETN"><a href="#CALL-RETN" class="headerlink" title="CALL / RETN"></a>CALL / RETN</h4><ul>
<li>CALL 可以理解为 CALLBACK；</li>
<li>CALL 会执行一个子程序，可以理解为执行了一个函数；</li>
<li>RETN 在 CALL 所执行的子程序中时，会返回该 CALL 所在的主程序，并继续向下执行；</li>
<li>RETN 与其他指令单独使用时，和 JMP 的功能相同；</li>
</ul>
<h3 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h3><h4 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h4><ul>
<li>LOOP 相当于</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XOR ECX, ECX</span><br><span class="line">MOV ECX, 6</span><br><span class="line">DEC ECX</span><br><span class="line">&#x2F;&#x2F; CMP ECX, 0</span><br><span class="line">TEST ECX, ECX</span><br><span class="line">JNZ [DEC ECX 所在的地址]</span><br></pre></td></tr></table></figure>

<ul>
<li>与以上指令不同的是：LOOP 执行时第一次循环计数器不会自减；</li>
<li>约定俗成：使用 ECX 作为计数器；</li>
</ul>
<h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul>
<li>直接寻址：指令后面直接写出此次运算使用的地址，称为直接寻址；</li>
<li>间接寻址：只有执行到某一行指令才能知道此次运算使用的地址，称为间接寻址；</li>
</ul>
]]></content>
      <categories>
        <category>逆向工程</category>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编指令</tag>
      </tags>
  </entry>
  <entry>
    <title>寄存器小记</title>
    <url>/posts/2/</url>
    <content><![CDATA[<h3 id="通用寄存器拆分"><a href="#通用寄存器拆分" class="headerlink" title="通用寄存器拆分"></a>通用寄存器拆分</h3><p>EAX / EBX / ECX / EDX</p>
<p>例如：</p>
<ul>
<li>EAX = 12345678</li>
<li>&nbsp;&nbsp;&nbsp;AX = &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5678</li>
<li>&nbsp;&nbsp;&nbsp;AH = &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;56</li>
<li>&nbsp;&nbsp;&nbsp;AL = &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;78<a id="more"></a></li>
<li>ESP 永远指向堆栈的最顶端；</li>
<li>堆栈顶端为 ESP，依次向下为 ESP + 4、ESP + 8 ，以此类推；</li>
<li>EIP 永远指向 CPU 即将执行的地址；</li>
<li>寄存器从第 18 位开始，存放的是该寄存器从起始位置依次向后的地址，即第 18 存放的是起始位置的地址；</li>
</ul>
<h3 id="标志位寄存器"><a href="#标志位寄存器" class="headerlink" title="标志位寄存器"></a>标志位寄存器</h3><ul>
<li><p>OF 是<code>溢出标志位</code>;</p>
<ul>
<li>当指令改变了符号位且返回错误值的时候，OF 为 1，表示溢出成立；</li>
<li>运算结果超出机器能够表示的范围称为溢出；</li>
</ul>
</li>
<li><p>PF 是 <code>奇偶标志位</code>；</p>
<ul>
<li>当指令的<code>返回值的二进制</code>表现形式中<code>1</code>的个数为偶数个时，PF 为 1；</li>
<li>运算结果的最低 16 位中含 1 的个数为偶数；</li>
<li>如：11，101，110，1001，1010，1100，1111</li>
</ul>
</li>
<li><p>ZF 是<code>0 标志符</code>.</p>
<ul>
<li>当前指令的运算结果为 0，则 ZF 为 1；</li>
</ul>
</li>
<li><p>SF 是<code>符号位标志符</code>;</p>
<ul>
<li>当指令的运算结果为负数时，SF 为 1；</li>
<li>SF 与运算结果的最高位相同；</li>
</ul>
</li>
<li><p>CF 是<code>进位标志符</code>；</p>
<ul>
<li>当指令的无符号运算结果超过最大值时，CF 为 1；</li>
<li>最高位产生进位或借位；</li>
</ul>
</li>
<li><p>AF 是<code>辅助进位标志符</code>；</p>
<ul>
<li>当指令的运算结果的低 4 位向高 4 位有进位或借位时，AF 为 1；</li>
</ul>
</li>
<li><p>TF 是<code>跟踪标志符</code>；</p>
<ul>
<li>用于调试单步操作；</li>
<li>若 TF 为 1，则每条指令执行结束后，产生中断；</li>
</ul>
</li>
<li><p>DF 是<code>方向标志符</code>；</p>
<ul>
<li>用来控制串处理指令的处理方向；</li>
<li>若 DF 为 1，则串处理中地址自动递减，否则自动自增；</li>
<li>若 DF 为 1，每次操作后使 SI 和 DI 递减，DF 为 0 时则自增；</li>
</ul>
</li>
<li><p>IF 是<code>中断标志符</code>；</p>
<ul>
<li>用来控制 CPU 是否响应可屏蔽中断；</li>
<li>若 IF 为 1 则允许中断，否则禁止中断；</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>逆向工程</category>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>寄存器</tag>
      </tags>
  </entry>
</search>
